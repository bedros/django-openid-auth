Description: Add an openid_response parameter to default_render_failure
 This allows the failure handler to take actions depending on the contents
 of the failure.
 .
 For example, we might want to handle "Unknown user" specially and maybe
 create an account for the user.
Author: Luke Faraone <lfaraone@zulip.com>
Last-Update: 2013-08-01
Forwarded: no

--- a/django_openid_auth/views.py
+++ b/django_openid_auth/views.py
@@ -123,6 +123,7 @@
 
 def default_render_failure(request, message, status=403,
                            template_name='openid/failure.html',
+                           openid_response=None,
                            exception=None):
     """Render an error page to the user."""
     data = render_to_string(
@@ -270,7 +271,7 @@
         try:
             user = authenticate(openid_response=openid_response)
         except DjangoOpenIDException, e:
-            return render_failure(request, e.message, exception=e)
+            return render_failure(request, e.message, exception=e, openid_response=openid_response)
             
         if user is not None:
             if user.is_active:
@@ -283,15 +284,16 @@
 
                 return response
             else:
-                return render_failure(request, 'Disabled account')
+                return render_failure(request, 'Disabled account', openid_response=openid_response)
         else:
-            return render_failure(request, 'Unknown user')
+            return render_failure(request, 'Unknown user', openid_response=openid_response)
     elif openid_response.status == FAILURE:
         return render_failure(
             request, 'OpenID authentication failed: %s' %
-            openid_response.message)
+            openid_response.message,
+            openid_response=openid_response)
     elif openid_response.status == CANCEL:
-        return render_failure(request, 'Authentication cancelled')
+        return render_failure(request, 'Authentication cancelled', openid_response=openid_response)
     else:
         assert False, (
             "Unknown OpenID response type: %r" % openid_response.status)
--- a/django_openid_auth/tests/test_views.py
+++ b/django_openid_auth/tests/test_views.py
@@ -515,6 +515,7 @@
         # Override the login_failure handler
         def mock_login_failure_handler(request, message, status=403,
                                        template_name=None,
+                                       openid_response=None,
                                        exception=None):
            self.assertTrue(isinstance(exception, MissingPhysicalMultiFactor))
            return HttpResponse('Test Failure Override', status=200)
@@ -923,6 +924,7 @@
         # Override the login_failure handler
         def mock_login_failure_handler(request, message, status=403,
                                        template_name=None,
+                                       openid_response=None,
                                        exception=None):
            self.assertTrue(isinstance(exception, (RequiredAttributeNotReturned, MissingUsernameViolation)))
            return HttpResponse('Test Failure Override', status=200)
@@ -993,6 +995,7 @@
         # Override the login_failure handler
         def mock_login_failure_handler(request, message, status=403,
                                        template_name=None,
+                                       openid_response=None,
                                        exception=None):
            self.assertTrue(isinstance(exception, DuplicateUsernameViolation))
            return HttpResponse('Test Failure Override', status=200)
